geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.5),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("~/Dropbox\ (Personal)/Graph\ Based\ Calibration\ Test/Code_w_package/figures-and-tables/classification_calibration_%s_n_%d.pdf", hypothesis, n),
plot = plot_to_save,
width = 5,
height = 4)
}
}
}
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
library(kableExtra)
library(tidyr)
hypothesis_list <- c("alternative", "null")
n_list <- c(75, 100)
alpha <- 0.05
for (hypothesis in hypothesis_list) {
for (n in n_list) {
# load the result
data <- readRDS(sprintf("~/Dropbox\ (Personal)/Graph\ Based\ Calibration\ Test/Code_w_package/results/Classification_calibration_%s_n_%d.rds",
hypothesis,
n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha, na.rm = TRUE)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25"))) |>
arrange(method)
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration Test for Classification with $n=%d$', n)
# table and ggplot
if(hypothesis == "null"){
# write a table
data_to_table <- data_to_plot |>
mutate(rejection_rate = round(rejection_rate, 3)) |>
pivot_wider(names_from = method,
values_from = rejection_rate)
# write_csv(results, "Figures/Classification-calibration/TypeI_error_75_classification.csv")
kable_output <- kable(data_to_table, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Test" = 2)) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(data_to_table))
# save the table
writeLines(kable_output, sprintf("~/Dropbox\ (Personal)/Graph\ Based\ Calibration\ Test/Code_w_package/figures-and-tables/TypeI_error_%d_classification.tex", n))
}else{
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.5),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("~/Dropbox\ (Personal)/Graph\ Based\ Calibration\ Test/Code_w_package/figures-and-tables/classification_calibration_%s_n_%d.pdf", hypothesis, n),
plot = plot_to_save,
width = 5,
height = 4)
}
}
}
hypothesis
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
library(kableExtra)
library(tidyr)
hypothesis_list <- c("Power", "TypeI")
n_list <- c(75, 100)
alpha <- 0.05
for (hypothesis in hypothesis_list) {
for (n in n_list) {
# load the result
data <- readRDS(sprintf("%s%d.rds",hypothesis, n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha, na.rm = TRUE)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25"))) |>
arrange(method)
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration Test for Classification with $n=%d$', n)
# table and ggplot
if(hypothesis == "null"){
# write a table
data_to_table <- data_to_plot |>
mutate(rejection_rate = round(rejection_rate, 3)) |>
pivot_wider(names_from = method,
values_from = rejection_rate)
# write_csv(results, "Figures/Classification-calibration/TypeI_error_75_classification.csv")
kable_output <- kable(data_to_table, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Test" = 2)) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(data_to_table))
# save the table
writeLines(kable_output, sprintf("TypeI%d.tex", n))
}else{
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.5),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("%s%d.pdf", hypothesis, n),
plot = plot_to_save,
width = 5,
height = 4)
}
}
}
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
library(kableExtra)
library(tidyr)
hypothesis_list <- c("Power", "TypeI")
n_list <- c(75, 100)
alpha <- 0.05
for (hypothesis in hypothesis_list) {
for (n in n_list) {
# load the result
data <- readRDS(sprintf("%s%d.rds",hypothesis, n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha, na.rm = TRUE)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25"))) |>
arrange(method)
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration Test for Classification with $n=%d$', n)
# table and ggplot
if(hypothesis == "null"){
# write a table
data_to_table <- data_to_plot |>
mutate(rejection_rate = round(rejection_rate, 3)) |>
pivot_wider(names_from = method,
values_from = rejection_rate)
# write_csv(results, "Figures/Classification-calibration/TypeI_error_75_classification.csv")
kable_output <- kable(data_to_table, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Test" = 2)) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(data_to_table))
# save the table
writeLines(kable_output, sprintf("TypeI%d.tex", n))
}else{
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical %s") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.5),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("%s%d.pdf", hypothesis, n),
plot = plot_to_save,
width = 5,
height = 4)
}
}
}
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
library(kableExtra)
library(tidyr)
hypothesis_list <- c("Power", "TypeI")
n_list <- c(75, 100)
alpha <- 0.05
for (hypothesis in hypothesis_list) {
for (n in n_list) {
# load the result
data <- readRDS(sprintf("%s%d.rds",hypothesis, n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha, na.rm = TRUE)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25"))) |>
arrange(method)
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration Test for Classification with $n=%d$', n)
# table and ggplot
if(hypothesis == "null"){
# write a table
data_to_table <- data_to_plot |>
mutate(rejection_rate = round(rejection_rate, 3)) |>
pivot_wider(names_from = method,
values_from = rejection_rate)
# write_csv(results, "Figures/Classification-calibration/TypeI_error_75_classification.csv")
kable_output <- kable(data_to_table, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Test" = 2)) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(data_to_table))
# save the table
writeLines(kable_output, sprintf("TypeI%d.tex", n))
}else{
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.5),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("%s%d.pdf", hypothesis, n),
plot = plot_to_save,
width = 5,
height = 4)
}
}
}
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
library(kableExtra)
library(tidyr)
hypothesis_list <- c("Power", "TypeI")
n_list <- c(75, 100)
alpha <- 0.05
for (hypothesis in hypothesis_list) {
for (n in n_list) {
# load the result
data <- readRDS(sprintf("%s%d.rds",hypothesis, n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha, na.rm = TRUE)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25"))) |>
arrange(method)
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration Test for Classification with $n=%d$', n)
# table and ggplot
if(hypothesis == "TypeI"){
# write a table
data_to_table <- data_to_plot |>
mutate(rejection_rate = round(rejection_rate, 3)) |>
pivot_wider(names_from = method,
values_from = rejection_rate)
# write_csv(results, "Figures/Classification-calibration/TypeI_error_75_classification.csv")
kable_output <- kable(data_to_table, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Test" = 2)) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(data_to_table))
# save the table
writeLines(kable_output, sprintf("TypeI%d.tex", n))
}else{
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.5),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("%s%d.pdf", hypothesis, n),
plot = plot_to_save,
width = 5,
height = 4)
}
}
}
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
n <- c(100)
alpha <- 0.05
# load the result
data <- readRDS(sprintf("Time%d.rds", n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(time = n) |>
dplyr::select(-n) |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25")))
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
# ggplot
plot_to_save <- data_to_plot |>
ggplot(aes(x = method, y = time, color = method)) +
geom_boxplot() +
scale_y_log10() +
labs(x = "method",
y = "Timing (seconds)") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position = "none",
legend.title = element_blank(),
legend.text = element_text(size = 8),  # Adjust the size if needed
legend.key.size = unit(0.5, "lines"), # Adjust the size if needed
legend.spacing.x = unit(0.1, "cm"),   # Adjust horizontal spacing
legend.spacing.y = unit(0.1, "cm")    # Adjust vertical spacing
) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
scale_x_discrete(labels = c("SKCE", "NN15 (asymp)", "NN25 (asymp)", "NN15 (derandom)", "NN25 (derandom)")) +
guides(color = guide_legend(
ncol = 3,  # Set the legend to 2 columns
byrow = TRUE, # Ensure items are filled by row
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 1.6)))
# save the plot
ggsave(sprintf("Time%d.pdf", n),
plot = plot_to_save,
width = 6,
height = 4)
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
n <- c(100)
alpha <- 0.05
# load the result
data <- readRDS(sprintf("Time%d.rds", n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(time = n) |>
dplyr::select(-n) |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN15", "asym_NN25",
"derandomized_NN15", "derandomized_NN25")))
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
# ggplot
plot_to_save <- data_to_plot |>
ggplot(aes(x = method, y = time, color = method)) +
geom_boxplot() +
scale_y_log10() +
labs(x = "method",
y = "Time (seconds)") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position = "none",
legend.title = element_blank(),
legend.text = element_text(size = 8),  # Adjust the size if needed
legend.key.size = unit(0.5, "lines"), # Adjust the size if needed
legend.spacing.x = unit(0.1, "cm"),   # Adjust horizontal spacing
legend.spacing.y = unit(0.1, "cm")    # Adjust vertical spacing
) +
scale_color_manual(labels = c("SKCE", "15 NN (asymp)","25 NN (asymp)",
"15 NN (derandom)","25 NN (derandom)"), values = pannel_cols) +
scale_x_discrete(labels = c("SKCE", "NN15 (asymp)", "NN25 (asymp)", "NN15 (derandom)", "NN25 (derandom)")) +
guides(color = guide_legend(
ncol = 3,  # Set the legend to 2 columns
byrow = TRUE, # Ensure items are filled by row
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 1.6)))
# save the plot
ggsave(sprintf("Time%d.pdf", n),
plot = plot_to_save,
width = 6,
height = 4)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Time Comparison.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Classification Calibration Simulation/Plot Time.R", echo=TRUE)
setwd("~/Documents/GitHub/ECMMD-CondTwoSamp/Regression Calibration Simulation")
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Regression Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Regression Calibration Simulation/Plot Time.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Regression Calibration Simulation/Time Comparison.R", echo=TRUE)
source("~/Documents/GitHub/ECMMD-CondTwoSamp/Regression Calibration Simulation/Plot Time.R", echo=TRUE)
