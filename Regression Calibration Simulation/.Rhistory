# This is a Rscript for regression calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
n_list <- c(50, 75)
alpha <- 0.05
for (n in n_list) {
# load the result
data <- readRDS(sprintf("Power%d.rds", n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN2", "asym_NN4",
"derandomized_NN2", "derandomized_NN4")))
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration test for regression model with $n=%d$', n)
# ggplot
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.3),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "2 NN (asymp)","4 NN (asymp)",
"2 NN (derandom)","4 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("Power%d.pdf", n),
plot = plot_to_save,
width = 5,
height = 4)
}
library(NNCDT)
library(dplyr)
## calibration for regression
set.seed(1)
B <- 500
n_train <- 200
mag <- seq(0.2, 1,  by = 0.2)
n_list <- c(50, 75)
method_mat <- data.frame(
method_list = c("SKCE", "derandomized_NN2", "derandomized_NN4", "asym_NN2", "asym_NN4"),
value = c(0, rep(c(2, 4), 2))
)
# loop over test size
for (n_test in n_list) {
# create empty array
p_value <- array(NA, dim = c(length(method_mat$method_list), B, length(mag)),
dimnames = list(method = method_mat$method_list,
reps = 1:B, signal = mag))
# loop over magnitude
for (signal in mag) {
# loop over realization
for (b in 1:B) {
n_total <- n_train + n_test
input <- runif(n_train + n_test, -1, 1)
output <- signal*sin(pi*input) + abs(1+input)*rnorm(length(input), 0, 0.15)
data <- data.frame(input = input,
output = output)
# ols estimate
ols_fit <- lm(output ~ input, data = data[1:n_train, ])
# loop over method_list
for (method in method_mat$method_list) {
# obtain data for proposed method
test_data <- data[(n_train + 1):n_total, ]
prediction <- predict(ols_fit, newdata = test_data)
sampled_data <- rnorm(n_test, mean = prediction, sd = sd(ols_fit$residuals))
sampled_data_control <- rnorm(n_test, mean = prediction, sd = sd(ols_fit$residuals))
if (method != "SKCE"){
# specify the test data
Z <- cbind(prediction, rep(sd(ols_fit$residuals), nrow(test_data)))
X <- sampled_data_control
Y <- sampled_data
# specify the number of nearest neighbors
k <- method_mat |> filter(method_list == method) |>
dplyr::select(value) |> pull()
# split the string
method_type <- strsplit(method, "_")[[1]][1]
if(method_type == "derandomized"){
p_value[method, b, as.character(signal)] <- derandomized_test(data = list(Y = X,
Z = Z),
k = k, hyper = "median_diff",
kernel_choice = "Gaussian",
num_derandom = 20,
resampling_dist = "Gaussian",
resamp_hyper = list(mean = Z[, 1],
sd = Z[, 2]))$p_value
}else{
p_value[method, b, as.character(signal)] <- asy_test(data = list(X = X,
Y = Y,
Z = Z),
k = k, hyper = "median_diff",
kernel_choice = "Gaussian")$p_value
}
}else{
# obtain data for SKCE method
pseduo_data <- data.frame(y = sampled_data,
px_mean = unname(predict(ols_fit, newdata = test_data)),
px_sd = unname(rep(sd(ols_fit$residuals), nrow(test_data))))
# apply SKCE method
p_value["SKCE", b, as.character(signal)] <- SKCE_regression_test(data = pseduo_data,
B = 300)
}
}
print(p_value[, b, as.character(signal)])
}
}
saveRDS(p_value, sprintf("TypeI%d.rds", n_test))
}
# This is a Rscript for regression calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
n_list <- c(50, 75)
alpha <- 0.05
for (n in n_list) {
# load the result
data <- readRDS(sprintf("Power%d.rds", n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(p_value = n) |>
dplyr::select(-n) |>
group_by(method, signal) |>
summarise(rejection_rate = mean(p_value <= alpha)) |>
ungroup() |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN2", "asym_NN4",
"derandomized_NN2", "derandomized_NN4")))
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
title_string <- sprintf('Calibration test for regression model with $n=%d$', n)
# ggplot
plot_to_save <- data_to_plot |>
ggplot(aes(x = signal, y = rejection_rate, color = method, group = method)) +
geom_line() +
geom_point(size = 2) +
labs(x = TeX(r"($\rho$)"),
y = "Empirical Power") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position=c(0.8, 0.3),
legend.title = element_blank()) +
scale_color_manual(labels = c("SKCE", "2 NN (asymp)","4 NN (asymp)",
"2 NN (derandom)","4 NN (derandom)"), values = pannel_cols) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5))) +
ggtitle(TeX(title_string))
# save the plot
ggsave(sprintf("Power%d.pdf", n),
plot = plot_to_save,
width = 5,
height = 4)
}
# This is a Rscript for classification calibration
library(ggplot2)
library(tibble)
library(dplyr)
library(latex2exp)
n <- c(75)
alpha <- 0.05
# load the result
data <- readRDS(sprintf("Time%d.rds", n))
# summarise the type-I error or rejection rate
data_to_plot <- as_tibble(as.table(data)) |>
mutate(time = n) |>
dplyr::select(-n) |>
mutate(method = factor(as.factor(method),
levels = c("SKCE", "asym_NN2", "asym_NN4",
"derandomized_NN2", "derandomized_NN4")))
# plot
my_theme <- theme_bw() + theme(plot.title = element_text(hjust = 0.5, size=11))
pannel_cols <- c("coral", "darkorchid4", "dodgerblue4", "dodgerblue3",
"dodgerblue1", "deepskyblue")
# ggplot
plot_to_save <- data_to_plot |>
ggplot(aes(x = method, y = time, color = method)) +
geom_boxplot() +
scale_y_log10() +
labs(x = "method",
y = "Time (seconds)") +
my_theme +
theme(legend.background = element_rect(color = 1),
legend.position = "none",
legend.title = element_blank(),
legend.text = element_text(size = 8),  # Adjust the size if needed
legend.key.size = unit(0.5, "lines"), # Adjust the size if needed
legend.spacing.x = unit(0.1, "cm"),   # Adjust horizontal spacing
legend.spacing.y = unit(0.1, "cm")    # Adjust vertical spacing
) +
scale_color_manual(labels = c("SKCE", "2 NN (asymp)","4 NN (asymp)",
"2 NN (derandom)","4 NN (derandom)"), values = pannel_cols) +
scale_x_discrete(labels = c("SKCE", "NN2 (asymp)", "NN4 (asymp)", "NN2 (derandom)", "NN4 (derandom)")) +
guides(color = guide_legend(
ncol = 3,  # Set the legend to 2 columns
byrow = TRUE, # Ensure items are filled by row
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 1.6)))
# save the plot
ggsave(sprintf("Time%d.pdf", n),
plot = plot_to_save,
width = 6,
height = 4)
