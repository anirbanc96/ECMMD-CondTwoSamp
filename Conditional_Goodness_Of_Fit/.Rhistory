source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Research - OLD FILES/gof-df/Cond_GoF")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional")
N_list <- seq(500, 2000, by = 250)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?rnorm
rnorm(1, mean = c(0,1), sd = c(1,2))
rnorm(2, mean = c(0,1), sd = c(1,2))
rnorm(2, mean = c(0,1), sd = c(1,2))
rnorm(2, mean = c(0,1), sd = c(0,2))
rnorm(2, mean = c(0,1), sd = c(0,0))
rnorm(3, mean = c(0,1), sd = c(0,0))
source("~/.active-rstudio-document", echo=TRUE)
N_list <- c(2000)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
n <- 1000
dim <- 3
M <- 200
Z <- matrix(rnorm(n*dim), nrow = n, ncol = dim)
Y <- matrix(rnorm(n*(M+1), mean = apply(Z, 1, sum),
sd = apply(Z, 1, function(x){sqrt(f_variance(x, rho = rho))})),
nrow = n, ncol = M+1)
reference_sample <- Y[, (M+1)]
Y[, (M+1)] <- rnorm(n, mean = apply(Z, 1, sum),
sd = 1)
nn_ind <- nn2(data = Z, query = Z, k = k)$nn.idx
k <- 50
nn_ind <- nn2(data = Z, query = Z, k = k)$nn.idx
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/Code.R", echo=TRUE)
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
T4 <- numeric(n)
# define test statistic
test_stat <- function(k, X, Y, nn_ind, l){
n <- length(X)
# T1 <- sapply(1:n, function(i){sum(k_G(X[rep(i, k - 1)], X[nn_ind[i,-1]], l)) / (k - 1)})
# T2 <- sapply(1:n, function(i){sum(k_G(Y[rep(i, k - 1)], Y[nn_ind[i,-1]], l)) / (k - 1)})
# T3 <- sapply(1:n, function(i){sum(k_G(X[rep(i, k - 1)], Y[nn_ind[i,-1]], l)) / (k - 1)})
# T4 <- sapply(1:n, function(i){sum(k_G(Y[rep(i, k - 1)], X[nn_ind[i,-1]], l)) / (k - 1)})
T1 <- numeric(n)
T2 <- numeric(n)
T3 <- numeric(n)
T4 <- numeric(n)
# for (i in 1:n) {
#   T1[i] <- sum(k_G(X[rep(i, k - 1)], X[nn_ind[i,-1]], l)) / (k - 1)
#   T2[i] <- sum(k_G(Y[rep(i, k - 1)], Y[nn_ind[i,-1]], l)) / (k - 1)
#   T3[i] <- sum(k_G(X[rep(i, k - 1)], Y[nn_ind[i,-1]], l)) / (k - 1)
#   T4[i] <- sum(k_G(Y[rep(i, k - 1)], X[nn_ind[i,-1]], l)) / (k - 1)
# }
sum(T1+T2-T3-T4)/n
}
source("Code.R")
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
source("Code.R")
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
source("Code.R")
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
source("Code.R")
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/GoF.R", echo=TRUE)
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/GoF.R", echo=TRUE)
gc()
gc()
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/GoF.R", echo=TRUE)
p_value
for (i in 1:length(K)){
print (apply(p_value[[i]], 2, function(x){mean(x<=0.05)}))
}
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/GoF.R", echo=TRUE)
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/GoF.R", echo=TRUE)
source("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional/GoF.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
EMMD_conditional_gof_df_test_null <- readRDS("~/Dropbox (Penn)/Research - OLD FILES/gof-df/EMMD_conditional_gof_df_test_null.rds")
setwd("~/Dropbox (Penn)/Research - OLD FILES/gof-df")
p_value <- readRDS("~/Dropbox (Penn)/Research - OLD FILES/gof-df/EMMD_conditional_gof_df_test_null.rds")
for (i in 1:length(K)){
print (apply(p_value[[i]], 2, function(x){mean(x<=0.05)}))
}
for (i in 1:4){
print (apply(p_value[[i]], 2, function(x){mean(x<=0.05)}))
}
p_value <- readRDS("~/Dropbox (Penn)/Research - OLD FILES/gof-df/EMMD_conditional_gof_df_test_null.rds")
for (i in 1:4){
print (apply(p_value[[i]], 2, function(x){mean(x<=0.05)}))
}
p_value <- readRDS("~/Dropbox (Penn)/Research - OLD FILES/gof-df/EMMD_conditional_gof_df_test_null.rds")
for (i in 1:4){
print (apply(p_value[[i]], 2, function(x){mean(x<=0.05)}))
}
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Research - OLD FILES/gof-df/GoF_conditional")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Research - OLD FILES/gof-df/Conditional_Goodness_Of_Fit")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
setwd("~/Dropbox (Penn)/Graph Based Calibration Test/code/Conditional_Goodness_Of_Fit")
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Conditional_Goodness_Of_Fit/CGOF_ECMMD.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Conditional_Goodness_Of_Fit/CGOF_ECMMD.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Conditional_Goodness_Of_Fit/CGOF_ECMMD.R", echo=TRUE)
TypeI_pvalues <- readRDS("CGOF_ECMMD_null.rds")
Power_pvalues <- readRDS("CGOF_ECMMD_alternative.rds")
TypeI <- matirx(0, nrow = length(K), ncol = length(N_list))
TypeI_pvalues <- readRDS("CGOF_ECMMD_null.rds")
Power_pvalues <- readRDS("CGOF_ECMMD_alternative.rds")
TypeI <- matrix(0, nrow = length(K), ncol = length(N_list))
Power <- matrix(0, nrow = length(K), ncol = length(N_list))
for (i in 1:length(K)){
TypeI[i, ] <- apply(TypeI_pvalues[[i]], 2, function(x){mean(x<=0.05)})
Power[i, ] <- apply(Power_pvalues[[i]], 2, function(x){mean(x<=0.05)})
}
View(Power)
TypeI <- cbind(K, TypeI); Power <- cbind(K, Power)
View(TypeI)
colnames(TypeI) <- c("K", "NN10", "NN25", "NN40")
colnames(Power) <- c("K", "NN10", "NN25", "NN40")
TypeI_pvalues <- readRDS("CGOF_ECMMD_null.rds")
Power_pvalues <- readRDS("CGOF_ECMMD_alternative.rds")
TypeI <- matrix(0, nrow = length(K), ncol = length(N_list))
Power <- matrix(0, nrow = length(K), ncol = length(N_list))
for (i in 1:length(K)){
TypeI[i, ] <- apply(TypeI_pvalues[[i]], 2, function(x){mean(x<=0.05)})
Power[i, ] <- apply(Power_pvalues[[i]], 2, function(x){mean(x<=0.05)})
}
colnames(TypeI) <- N_list; colnames(Power) <- N_list
TypeI <- cbind(K, TypeI); Power <- cbind(K, Power)
View(Power)
tidyverse::write_csv(as.data.frame(TypeI), "CGOF_ECMMD_TypeI.csv")
write_csv(as.data.frame(TypeI), "CGOF_ECMMD_TypeI.csv")
write.csv(as.data.frame(TypeI), "CGOF_ECMMD_TypeI.csv")
write.csv(as.data.frame(Power), "CGOF_ECMMD_Power.csv")
KCSD_TypeI_Power <- read.csv("KCSD_results.csv")
ECMMD_TypeI <- read.csv("CGOF_ECMMD_TypeI.csv")
View(ECMMD_TypeI)
KCSD_TypeI_Power <- read.csv("KCSD_results.csv")[, -1]
ECMMD_TypeI <- read.csv("CGOF_ECMMD_TypeI.csv")[, -1]
View(KCSD_TypeI_Power)
source("~/.active-rstudio-document", echo=TRUE)
View(KCSD_TypeI_Power)
View(KCSD_TypeI_Power)
View(ECMMD_TypeI)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI[1,-1])
require(tidyverse)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI[1,-1])
View(TypeI)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI[1,2:dim(ECMMD_TypeI)[2]])
View(TypeI)
View(KCSD_TypeI_Power)
View(TypeI)
ECMMD_TypeI <- t(read.csv("CGOF_ECMMD_TypeI.csv")[, -1])
View(ECMMD_TypeI)
ECMMD_TypeI <- as_tibble(t(read.csv("CGOF_ECMMD_TypeI.csv")[, -1]))
View(ECMMD_TypeI)
ECMMD_TypeI <- as_tibble(t(read.csv("CGOF_ECMMD_TypeI.csv")[-1, -1]))
View(ECMMD_TypeI)
ECMMD_TypeI <- as_tibble(t(read.csv("CGOF_ECMMD_TypeI.csv")[, -1]))
View(ECMMD_TypeI)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI$V1[-1])
View(TypeI)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI$V1[-1],
NN25 = ECMMD_TypeI$V2[-1],
NN40 = ECMMD_TypeI$V3[-1])
View(TypeI)
View(KCSD_TypeI_Power)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI$V1[-1],
NN25 = ECMMD_TypeI$V2[-1],
NN40 = ECMMD_TypeI$V3[-1]) %>%
select(-Power)
View(TypeI)
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI$V1[-1],
NN25 = ECMMD_TypeI$V2[-1],
NN40 = ECMMD_TypeI$V3[-1],
KCSD = TypeI_error) %>%
select(-Power) %>% select(-TypeI_error)
View(TypeI)
View(TypeI)
View(TypeI)
colnames(TypeI) <- c("Sample Size", " 10 NN", "25 NN", "40 NN", "KCSD")
kable_output <- kable(TypeI, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(results))
require(kableExtra)
kable_output <- kable(TypeI, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(results))
kable_output <- kable(TypeI, "latex", booktabs = T, escape = FALSE,
align = c('c', 'c', 'c', 'c', 'c')) %>%
kable_styling(font_size = 5, latex_options = c("striped", "hold_position"), full_width = FALSE) %>%
add_header_above("Type-I Error") %>%
row_spec(nrow(TypeI))
writeLines(kable_output, "CGOF_TypeIError.tex")
# define Gaussian kernel
k_G <- function(X, Y, bandwidth){
exp(-(X - Y)^2 / bandwidth)
}
# define test statistic
test_stat <- function(k, X, Y, nn_ind, l){
n <- length(X)
T1 <- sapply(1:n, function(i){sum(k_G(X[rep(i, k - 1)], X[nn_ind[i,-1]], l)) / (k - 1)})
T2 <- sapply(1:n, function(i){sum(k_G(Y[rep(i, k - 1)], Y[nn_ind[i,-1]], l)) / (k - 1)})
T3 <- sapply(1:n, function(i){sum(k_G(X[rep(i, k - 1)], Y[nn_ind[i,-1]], l)) / (k - 1)})
T4 <- sapply(1:n, function(i){sum(k_G(Y[rep(i, k - 1)], X[nn_ind[i,-1]], l)) / (k - 1)})
sum(T1+T2-T3-T4)/n
}
# define the variance function
f_variance <- function(x, rho = 0){
return (1 + rho*exp(-sum((x-0.8)^2) / (2*0.8^2)))
}
knn_p_value.B_r <- function(r, k, B, M, n, rho,
test_type = "alternative", dim = 3){
set.seed(r)
Z <- matrix(rnorm(n*dim), nrow = n, ncol = dim)
Y <- matrix(rnorm(n*(M+1), mean = apply(Z, 1, sum),
sd = apply(Z, 1, function(x){sqrt(f_variance(x, rho = rho))})),
nrow = n, ncol = M+1)
reference_sample <- Y[, (M+1)]
if (test_type == "alternative"){
Y[, (M+1)] <- rnorm(n, mean = apply(Z, 1, sum),
sd = 1)
}
else{
Y[, (M+1)] <- rnorm(n, mean = apply(Z, 1, sum),
sd = apply(Z, 1, function(x){sqrt(f_variance(x, rho = rho))}))
}
nn_ind <- nn2(data = Z, query = Z, k = k)$nn.idx
null_set <- apply(Y, 2, function(x){
l <- median(abs(x - reference_sample))^2
test_stat(k, reference_sample, x, nn_ind, l)
})
return (mean(null_set >= null_set[(M+1)]))
}
library(foreach)
library(doParallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
clusterExport(cl, c("f_variance", "k_G", "knn_p_value.B_r", "test_stat"))
registerDoParallel(cl)
knn_p_value <- function(k, B, M, N_list, rho, test_type, dim = 3){
p_value_mat <- matrix(0, B, length(N_list))
writeLines(c("Starting Experiment with :", test_type, " KNN :", k, "\n"), "log.txt")
for (i in 1:length(N_list)){
p_value_mat[, i] <- foreach(r=1:B, .combine=rbind, .packages = c("RANN")) %dopar% {
output <- knn_p_value.B_r(r, k, B, M, N_list[i],
rho, test_type)
cat(paste("Finished iteration ", r, " with Sample Size ", N_list[i], "\n"), file = "log.txt", append = T)
output
}
}
return (p_value_mat)
}
################################################################################
B <- 200
M <- 100
N_list <- c(50, 100, 150, 200, 250, 300)
K <- c(10, 20, 30, 40)
rho <- 10
test_type_list <- c("null", "alternative")
for (test_type in test_type_list){
p_value <- list(NN_10 = matrix(0, B, length(N_list)),
NN_25 = matrix(0, B, length(N_list)),
NN_40 = matrix(0, B, length(N_list)))
p_value <- lapply(1:length(K),
function(x){knn_p_value(K[x], B, M, N_list, rho, test_type)})
print (test_type)
for (i in 1:length(K)){
print (apply(p_value[[i]], 2, function(x){mean(x<=0.05)}))
}
# save rds file
# saveRDS(p_value,
#         sprintf("CGOF_ECMMD_%s.rds",
#                 test_type))
}
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Conditional_Goodness_Of_Fit/CGOF_ECMMD.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
KCSD_TypeI_Power <- read.csv("KCSD_results.csv")
ECMMD_TypeI <- as_tibble(t(read.csv("CGOF_ECMMD_TypeI.csv")[, -1]))
TypeI <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_TypeI$V1[-1],
NN20 = ECMMD_TypeI$V2[-1],
NN30 = ECMMD_TypeI$V3[-1],
NN40 = ECMMD_TypeI$V4[-1],
KCSD = TypeI_error) %>%
select(-Power) %>% select(-TypeI_error)
colnames(TypeI) <- c("Sample Size", " 10 NN", "20 NN", "30 NN", "40 NN" "KCSD")
source("~/.active-rstudio-document", echo=TRUE)
ECMMD_Power <- as_tibble(t(read.csv("CGOF_ECMMD_Power.csv")[, -1]))
View(ECMMD_Power)
Power <- KCSD_TypeI_Power %>%
mutate(NN10 = ECMMD_Power$V1[-1],
NN20 = ECMMD_Power$V2[-1],
NN30 = ECMMD_Power$V3[-1],
NN40 = ECMMD_Power$V4[-1],
KCSD = Power) %>%
select(-TypeI_error) %>% select(-Power)
View(Power)
View(Power)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
